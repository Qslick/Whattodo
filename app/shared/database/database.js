"use strict";
var core_1 = require("@angular/core");
var nativescript_couchbase_1 = require("nativescript-couchbase");
// var couchbaseModule = require("nativescript-couchbase");
var Database = (function () {
    function Database() {
        this.eventList = [];
        this.lookupDocumentKey = "events"; //defining keys for database, should never change
        console.log("Database: constructor()");
        this.eventDatabase = new nativescript_couchbase_1.Couchbase("event_db"); //initalizing Database
        this.lookupDatabase = new nativescript_couchbase_1.Couchbase("lookup_db"); //initalizing Database
        this.lookupDocument = this.lookupDatabase.getDocument(this.lookupDocumentKey); //creating single document with unchanging key
        var lookupDoc = {
            index: "-1",
            number_of_events: "-1"
        };
        if (!this.lookupDocument) {
            this.lookupDatabase.createDocument(lookupDoc, this.lookupDocumentKey);
            console.log("initalizing lookupDocument: " + this.lookupDocument);
        }
        this.updateList();
        // this.reset();
    }
    // updateDocument(key, data)
    // createDocument(data, key)
    // event = { //createing event and storeing it's key inside
    //         key: numOfEvents,
    //         title: title,
    //         description: description,
    //         priority: priority,
    //         startTime: startTime,
    //         endTime: endTime
    //     };
    Database.prototype.deleteEvent = function (key) {
        this.eventDatabase.deleteDocument(key);
        var number_of_eventNew = this.lookupDatabase.getDocument(this.lookupDocumentKey).number_of_events;
        var indexCurrentNew = this.lookupDatabase.getDocument(this.lookupDocumentKey).index;
        number_of_eventNew = String((Number(number_of_eventNew) - 1));
        indexCurrentNew = String((Number(indexCurrentNew) - 1));
        this.lookupDatabase.updateDocument(this.lookupDocumentKey, {
            index: indexCurrentNew,
            number_of_events: number_of_eventNew
        });
        this.eventList[key] = this.eventList[this.eventList.length - 1];
        this.eventList[this.eventList.length - 1] = null;
    };
    Database.prototype.reset = function () {
        var index = this.lookupDatabase.getDocument(this.lookupDocumentKey).number_of_events;
        index = Number(index);
        for (var t = 0; t < index; t++) {
            var eventKeys = String(t);
            this.eventDatabase.deleteDocument(eventKeys);
        }
        this.lookupDatabase.updateDocument(this.lookupDocumentKey, {
            index: "-1",
            number_of_events: "-1"
        });
        this.eventList = [];
        console.log("DB RESET");
    };
    Database.prototype.editEvent = function (key, title, description, priority, startTime, endTime, icon) {
        this.eventDatabase.updateDocument(key, {
            key: key,
            title: title,
            description: description,
            priority: priority,
            startTimeHour: startTime.getHours(),
            startTimeMinute: startTime.getMinutes(),
            endTimeHour: endTime.getHours(),
            endTimeMinute: endTime.getMinutes(),
            icon: icon
        });
        this.updateList();
    };
    Database.prototype.newEvent = function (title, description, priority, startTime, endTime, icon) {
        var numOfEvents = this.lookupDatabase.getDocument(this.lookupDocumentKey).index;
        numOfEvents = Number(numOfEvents);
        var adjustedNumEvents = numOfEvents + 2;
        adjustedNumEvents = String(adjustedNumEvents);
        numOfEvents += 1;
        numOfEvents = String(numOfEvents);
        // let startTimeStr = startTime.getHours() + "." + startTime.getMinutes();
        // let endTimeStr = endTime.getHours() + "." + endTime.getMinutes();
        var event = {
            key: numOfEvents,
            title: title,
            description: description,
            priority: priority,
            startTimeHour: startTime.getHours(),
            startTimeMinute: startTime.getMinutes(),
            endTimeHour: endTime.getHours(),
            endTimeMinute: endTime.getMinutes(),
            icon: icon
        };
        this.eventDatabase.createDocument(event, numOfEvents);
        this.lookupDatabase.updateDocument(this.lookupDocumentKey, {
            index: numOfEvents,
            number_of_events: adjustedNumEvents
        });
        this.updateList();
    }; //end of newEvent
    Database.prototype.updateList = function () {
        var index = this.lookupDatabase.getDocument(this.lookupDocumentKey).number_of_events;
        index = Number(index);
        for (var t = 0; t < index; t++) {
            var eventKeys = String(t);
            this.eventList[t] = (this.eventDatabase.getDocument(eventKeys));
        }
    }; //end of updateList
    Database.prototype.getEventList = function () {
        return this.eventList;
    };
    Database = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], Database);
    return Database;
}());
exports.Database = Database;
//# sourceMappingURL=data:application/json;base64,