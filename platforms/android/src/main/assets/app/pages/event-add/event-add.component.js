"use strict";
var core_1 = require('@angular/core');
var router_1 = require("@angular/router");
var router_2 = require("@angular/router");
var StackLayout = require("ui/layouts/stack-layout").StackLayout;
var event_handeler_provider_1 = require("../../shared/providers/event-handeler/event-handeler.provider");
var database_1 = require("../../shared/database/database");
var element_registry_1 = require('nativescript-angular/element-registry');
element_registry_1.registerElement('CheckBox', function () { return require('nativescript-checkbox').CheckBox; });
var nativescript_toasty_1 = require('nativescript-toasty');
var TimeDatePicker = require('nativescript-timedatepicker');
var EventAddComponent = (function () {
    function EventAddComponent(route, router, database, eventHandeler) {
        var _this = this;
        this.route = route;
        this.router = router;
        this.database = database;
        this.eventHandeler = eventHandeler;
        this.title = "Computer Science";
        this.description = "description I guess";
        this.icon = -1;
        this.days = [false, false, false, false, false, false, false];
        this.priorityLevel = -1;
        this.startTimeCheck = false;
        this.endTimeCheck = false;
        this.priorityCheck = true;
        this.startTimeStr = "4:00 pm";
        this.endTimeStr = "5:00 pm";
        this.updateEvent = false;
        //----------------------------------
        this.timeDuration = "2:39";
        this.route.queryParams.subscribe(function (params) {
            if (params["key"]) {
                _this.updateEvent = true;
                _this.key = params["key"];
                _this.title = params["title"];
                _this.description = params["description"],
                    _this.priority = params["priority"],
                    _this.startTime = params["startTime"],
                    _this.endTime = params["endTime"];
            } //end of if
        });
        // page = <Page>frame.topmost().currentPage;
    } //end of constructor
    EventAddComponent.prototype.ngOnInit = function () {
    };
    EventAddComponent.prototype.ngAfterViewInit = function () {
        //  let scrollViewIcon: ScrollView = this.scroll.nativeElement;
        //  SwissArmyKnife.removeHorizontalScrollBars(StackLayout);
    };
    EventAddComponent.prototype.doneBtn = function () {
        if (this.title == null) {
            //             let snackbar = new SnackBar();
            //     snackbar.simple('Snackbar').then((args) => {
            //          this.set('jsonResult', JSON.stringify(args));
            //    })
            var toast = new nativescript_toasty_1.Toasty("Please enter a title.", "short", "middle");
            toast.show();
        }
        else if (this.description == null) {
            var toast = new nativescript_toasty_1.Toasty("Please enter a description.", "short");
            toast.show();
        }
        else if (this.priorityLevel == -1) {
            var toast = new nativescript_toasty_1.Toasty("Please enter a priority level.", "short");
            toast.show();
        }
        else if (this.startTimeCheck == false) {
            var toast = new nativescript_toasty_1.Toasty("Please enter a start time.", "short");
            toast.show();
        }
        else if (this.endTimeCheck == false) {
            var toast = new nativescript_toasty_1.Toasty("Please enter an end time.", "short");
            toast.show();
        }
        else if (this.days[0] == false && this.days[1] == false && this.days[2] == false &&
            this.days[3] == false && this.days[4] == false && this.days[5] == false && this.days[6] == false) {
            var toast = new nativescript_toasty_1.Toasty("Please Select what day your event is on.", "short");
            toast.show();
        }
        else {
            if (this.updateEvent == true) {
                this.database.editEvent(this.key, this.title, this.description, this.priorityLevel, this.startTime, this.endTime, this.icon);
            }
            else {
                this.database.newEvent(this.title, this.description, this.priorityLevel, this.startTime, this.endTime, this.icon);
            }
            console.log("priority " + this.priority);
            this.router.navigate(["/home"]);
        } //end of else
    }; //end of method
    EventAddComponent.prototype.initalTime = function () {
        var _this = this;
        var date = new Date();
        var mCallback = (function (result) {
            if (result) {
                date.setHours(Number(result.substring(11, 13)));
                date.setMinutes(Number(result.substring(14, 16)));
                _this.endTime = date;
                _this.startTimeStr = date.getHours() + ":" + date.getMinutes();
                console.log(_this.startTimeStr);
            }
            _this.startTimeCheck = true;
        });
        //Initialize the PickerManager (.init(yourCallback, title, initialDate))
        TimeDatePicker.init(mCallback, null, null);
        //Show the dialog
        TimeDatePicker.showTimePickerDialog();
    }; //end of method
    EventAddComponent.prototype.finalTime = function () {
        var _this = this;
        var date = new Date();
        var mCallback = (function (result) {
            if (result) {
                date.setHours(Number(result.substring(11, 13)));
                date.setMinutes(Number(result.substring(14, 16)));
                _this.startTime = date;
                _this.endTimeStr = date.getHours() + ":" + date.getMinutes();
                console.log(_this.endTimeStr);
            }
            _this.endTimeCheck = true;
        });
        //Initialize the PickerManager (.init(yourCallback, title, initialDate))
        TimeDatePicker.init(mCallback, null, null);
        //Show the dialog
        TimeDatePicker.showTimePickerDialog();
    };
    EventAddComponent.prototype.cancelBtn = function () {
        this.router.navigate(["/home"]);
    };
    EventAddComponent.prototype.priority1 = function () {
        this.priorityLevel = 0;
        // console.log(this.priorityLevel);
    };
    EventAddComponent.prototype.priority2 = function () {
        this.priorityLevel = 1;
        // console.log(this.priorityLevel);
    };
    EventAddComponent.prototype.priority3 = function () {
        this.priorityLevel = 2;
        // console.log(this.priorityLevel);
    };
    EventAddComponent.prototype.monday = function () {
        if (this.days[0] == true) {
            this.days[0] = false;
            console.log("Button tapped now: " + this.days[0]);
        }
        else if (this.days[0] == false) {
            this.days[0] = true;
            console.log("Button tapped now: " + this.days[0]);
        }
    };
    EventAddComponent.prototype.tuesday = function () {
        if (this.days[1] == true) {
            this.days[1] = false;
            console.log("Button tapped now: " + this.days[1]);
        }
        else if (this.days[1] == false) {
            this.days[1] = true;
            console.log("Button tapped now: " + this.days[1]);
        }
    };
    EventAddComponent.prototype.wednesday = function () {
        if (this.days[2] == true) {
            this.days[2] = false;
            console.log("Button tapped now: " + this.days[2]);
        }
        else if (this.days[2] == false) {
            this.days[2] = true;
            console.log("Button tapped now: " + this.days[2]);
        }
    };
    EventAddComponent.prototype.thursday = function () {
        if (this.days[3] == true) {
            this.days[3] = false;
            console.log("Button tapped now: " + this.days[3]);
        }
        else if (this.days[3] == false) {
            this.days[3] = true;
            console.log("Button tapped now: " + this.days[3]);
        }
    };
    EventAddComponent.prototype.friday = function () {
        if (this.days[4] == true) {
            this.days[4] = false;
            console.log("Button tapped now: " + this.days[4]);
        }
        else if (this.days[4] == false) {
            this.days[4] = true;
            console.log("Button tapped now: " + this.days[4]);
        }
    };
    EventAddComponent.prototype.saturday = function () {
        if (this.days[5] == true) {
            this.days[5] = false;
            console.log("Button tapped now: " + this.days[5]);
        }
        else if (this.days[5] == false) {
            this.days[5] = true;
            console.log("Button tapped now: " + this.days[5]);
        }
    };
    EventAddComponent.prototype.sunday = function () {
        if (this.days[6] == true) {
            this.days[6] = false;
            console.log("Button tapped now: " + this.days[6]);
        }
        else if (this.days[6] == false) {
            this.days[6] = true;
            console.log("Button tapped now: " + this.days[6]);
        }
    };
    EventAddComponent.prototype.icon1 = function (iconId) {
        this.icon = iconId;
        console.log("icon " + this.icon + " tapped.");
    };
    __decorate([
        core_1.ViewChild("scroll"), 
        __metadata('design:type', core_1.ElementRef)
    ], EventAddComponent.prototype, "scroll", void 0);
    EventAddComponent = __decorate([
        core_1.Component({
            selector: 'my-app',
            templateUrl: "./pages/event-add/event-add.html",
            styleUrls: ["./pages/event-add/event-add.css"]
        }), 
        __metadata('design:paramtypes', [router_2.ActivatedRoute, router_1.Router, database_1.Database, event_handeler_provider_1.EventHandeler])
    ], EventAddComponent);
    return EventAddComponent;
}());
exports.EventAddComponent = EventAddComponent; //end of Class
/**--------------
 * ----NOTES-----
 * --------------
 *
 * ---Remember---
 * *Go into the fontAwesome file and comment out the icons that are
 * not being used. It takes up space in the application.
 *
 * ---Issues---
 * *If you enter in data into one of the fields and delete it,
 * it the property in the Typescript is no longer NULL and doesn't,
 * get cought by the 'if(null)' check
 */ 
//# sourceMappingURL=data:application/json;base64,